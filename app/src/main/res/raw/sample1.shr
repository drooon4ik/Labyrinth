attribute vec3 vertexPosition_modelspace;
attribute vec3 vertexNormal_modelspace;
attribute vec3 a_UV;
uniform mat4 MVP;
uniform mat4 M;

varying vec3 Normal_worldspace;
varying vec3 Position_worldspace;
varying vec2 UV;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace, 1.0);
	
	// Position of the vertex, in worldspace : M * position
	Position_worldspace = (M * vec4(vertexPosition_modelspace,1.0)).xyz;

	Normal_worldspace = (M * vec4(vertexNormal_modelspace, 0.0)).xyz;
	UV = a_UV.xy;
}

[FRAGMENT]

varying vec3 Normal_worldspace;
varying vec3 Position_worldspace;
varying vec2 UV;

uniform vec3 light_position;
uniform sampler2D myTextureSampler;

void main(){
    vec3 LightColor = vec3(1,1,1);
    float LightPower = 20.0f;

    //vec3 MaterialDiffuseColor = vec3(0.9,0.9,0.9);//texture2D( myTextureSampler, UV ).rgb;
    vec3 MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.0,0.0,0.0) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

    float d = distance(Position_worldspace, light_position);

    vec3 l = normalize(light_position - Position_worldspace);
    vec3 n = normalize(Normal_worldspace);
    float cosTheta = clamp(dot(n,l), 0.0, 1.0);

    // Eye vector (towards the camera)
	//vec3 E = normalize(EyeDirection_worldspace);
	vec3 E = l;
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0.0,1.0 );

   vec3 color =   		MaterialAmbientColor +
                		// Diffuse : "color" of the object
                		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (d*d) +
                		// Specular : reflective highlight, like a mirror
                		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,200.0) / (d*d);

    gl_FragColor = vec4(color, 1.0);
}
